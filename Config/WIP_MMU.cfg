[force_move]
enable_force_move: True
#   Set to true to enable FORCE_MOVE and SET_KINEMATIC_POSITION
#   extended G-Code commands. The default is false.

#Variable Store
[gcode_macro _FILAMENT_VARS]
variable_activelane: None
variable_lane_count: 2 # Number of lanes to look for
variable_infinitespool: 1
variable_bowden_length: 1270 # Run the MEASURE_BOWDEN macro to get an estimate for this value
variable_filament_feed_length: 105 # The amount of travel needed to clear extruder on filament removal.
variable_stepper_accel: 200
variable_stepper_speed: 45
variable_bowden_calculate: 0
variable_pause_flag: False
variable_slacker_enabled: False
gcode: # Gcode section left intentionally blank. Do not disturb.

    {action_respond_info(" Running the VARIABLE_STORE macro does nothing")}

[mcu pcu]
canbus_uuid: 2c180b4d19b3

# Aliases for easier configuration.

[board_pins pcu_alias]
mcu: pcu
aliases:
aliases_both_sides:
  taut=PA3,
  slack=PA4,
aliases_lane0:
  sensor_0=PB9,
  lane0_step=PB15,
  lane0_dir=PB14,
  lane0_enable=PA8,
  lane0_uart=PA10,
aliases_lane1:
  sensor_1=PB8,
  lane1_step=PD2,
  lane1_dir=PB13,
  lane1_enable=PD1,
  lane1_uart=PC7,


#
# Below are the stepper configs, you will need one for each lane
#

[extruder_stepper stepper_0]
extruder: 
step_pin: pcu:lane0_step
dir_pin: pcu:lane0_dir
enable_pin: !pcu:lane0_enable
microsteps: 16
rotation_distance: 23.356478952687 
gear_ratio: 50:10 # CW2 gear ratio
microsteps: 16
full_steps_per_rotation: 200

[tmc2209 extruder_stepper stepper_0]
uart_pin: pcu:lane0_uart
run_current: 0.8
hold_current: .1
stealthchop_threshold: 0
interpolate: True

[extruder_stepper stepper_1]
extruder: 
step_pin: pcu:lane1_step
dir_pin: pcu:lane1_dir
enable_pin: !pcu:lane1_enable
microsteps: 16
rotation_distance: 23.356478952687 #16.27062274656 
gear_ratio: 50:10 # CW2 gear ratio
microsteps: 16
full_steps_per_rotation: 200

[tmc2209 extruder_stepper stepper_1]
uart_pin: pcu:lane1_uart
run_current: 0.8
hold_current: .1
stealthchop_threshold: 0
interpolate: True

#
# Sensors below, you will need 1 Belay sensor and then 1 sensor for each lane
#

#[belay belay0]
#extruder_type: extruder_stepper
#extruder_stepper_name: stepper_1
#sensor_pin: ^!pcu:belay
#multiplier_high: 1.3
#multiplier_low: .7
#debug_level: 1

[filament_switch_sensor taut]
switch_pin: ^pcu:taut
pause_on_runout: False
insert_gcode:
  {% set lane = printer["gcode_macro _FILAMENT_VARS"].activelane %}
  RESPOND MSG="Lane {lane}: TAUT"
  FORCE_MOVE STEPPER="extruder_stepper stepper_{lane}" DISTANCE=3 VELOCITY=50 ACCEL=600

[filament_switch_sensor slack]
switch_pin: ^pcu:slack
pause_on_runout: False
insert_gcode:
  {% set lane = printer["gcode_macro _FILAMENT_VARS"].activelane %}
  RESPOND MSG="Lane {lane}: SLACK"
  FORCE_MOVE STEPPER="extruder_stepper stepper_{lane}" DISTANCE=-3 VELOCITY=50 ACCEL=600

[filament_switch_sensor sensor_0]
switch_pin: ^pcu:sensor_0
pause_on_runout: False

[filament_switch_sensor sensor_1]
switch_pin: ^pcu:sensor_1
pause_on_runout: False

#
# Macros:
#

[gcode_macro SYNC_EXTRUDER]
gcode:
  {% set lane = params.LANE %}
  {% if not printer['extruder_stepper stepper_' + lane|string].motion_queue == 'extruder' %}
    SYNC_EXTRUDER_MOTION EXTRUDER=stepper_{lane} MOTION_QUEUE=extruder
  {% endif %}

[gcode_macro ISOLATE_EXTRUDER]
gcode:
  {% set lane = params.LANE %}
  {% if printer['extruder_stepper stepper_' + lane|string].motion_queue == 'extruder' %}
    SYNC_EXTRUDER_MOTION EXTRUDER=stepper_{lane} MOTION_QUEUE=
  {% endif %}

[gcode_macro CHECK_STATUS]
gcode:
  {% set lane = 0 %}
  {% set stepper_accel = printer["gcode_macro _FILAMENT_VARS"].stepper_accel %}
  {% for lane in range(printer["gcode_macro _FILAMENT_VARS"].lane_count) %}
    {% if printer['filament_switch_sensor sensor_' + lane|string].filament_detected and printer["filament_switch_sensor taut"].filament_detected %}
      ISOLATE_EXTRUDER LANE={lane}
      FORCE_MOVE STEPPER="extruder_stepper stepper_{lane}" DISTANCE=6 VELOCITY=50 ACCEL={stepper_accel}
      M400 # Wait for buffer to clear
      {% set step = 0 %}
      {% for step in range(10) %}
        M400
        _PUSHING_CHECK LANE={lane} STEP={step}
        M400
      {% endfor %}
    {% elif printer['filament_switch_sensor sensor_' + lane|string].filament_detected %}
      ISOLATE_EXTRUDER LANE={lane}
      FORCE_MOVE STEPPER="extruder_stepper stepper_{lane}" DISTANCE=-6 VELOCITY=50 ACCEL={stepper_accel}
      M400 # Wait for buffer to clear
      {% set step = 0 %}
      {% for step in range(350) %}
        M400
        _PULLING_CHECK LANE={lane} STEP={step}
        M400
      {% endfor %}
    {% elif not printer['filament_switch_sensor sensor_' + lane|string].filament_detected %}
      ISOLATE_EXTRUDER LANE={lane}
      FORCE_MOVE STEPPER="extruder_stepper stepper_{lane}" DISTANCE=20 VELOCITY=50 ACCEL={stepper_accel}
      M400 # Wait for buffer to clear
      _CHECKING_LANE LANE={lane}
    #{% elif printer['filament_switch_sensor sensor_' + lane|string].filament_detected and printer["filament_switch_sensor slack"].filament_detected %}
    #  ISOLATE_EXTRUDER LANE={lane}
    #  FORCE_MOVE STEPPER="extruder_stepper stepper_{lane}" DISTANCE=-10 VELOCITY=50 ACCEL={stepper_accel}
    #  M400 # Wait for buffer to clear
    #  _CHECKING_BELAY LANE={lane}
    {% else %}
      RESPOND MSG="Lane {lane}: No Filament is loaded"
    {% endif %}
  {% endfor %}

[gcode_macro _PUSHING_CHECK]
gcode:
  {% set lane = params.LANE %}
  {% set step = params.STEP|int %}
  {% set stepper_accel = printer["gcode_macro _FILAMENT_VARS"].stepper_accel %}
  {% if not printer["filament_switch_sensor slack"].filament_detected and printer['filament_switch_sensor sensor_' + lane|string].filament_detected %}
    ISOLATE_EXTRUDER LANE={lane}
    M400
    FORCE_MOVE STEPPER="extruder_stepper stepper_{lane}" DISTANCE=6 VELOCITY=50 ACCEL={stepper_accel} 
    M400
  {% elif step == 9 and printer["filament_switch_sensor slack"].filament_detected and printer['filament_switch_sensor sensor_' + lane|string].filament_detected %}
    RESPOND MSG="Lane {lane} - Filament is at toolhead"
    SET_LANE LANE={lane}
  {% elif step == 9 %}
    REMOVE_FILAMENT LANE={lane}  SKIPCHECK=True
    RESPOND MSG="Lane {lane} - Filament is ready"
  {% endif %}

[gcode_macro _PULLING_CHECK]
gcode:
  {% set lane = params.LANE %}
  {% set step = params.STEP|int %}
  {% set stepper_accel = printer["gcode_macro _FILAMENT_VARS"].stepper_accel %}
  {% if not printer["filament_switch_sensor taut"].filament_detected and printer['filament_switch_sensor sensor_' + lane|string].filament_detected %}
    ISOLATE_EXTRUDER LANE={lane}
    M400
    FORCE_MOVE STEPPER="extruder_stepper stepper_{lane}" DISTANCE=-6 VELOCITY=50 ACCEL={stepper_accel} 
    M400
  {% elif step == 349 and printer["filament_switch_sensor taut"].filament_detected and printer['filament_switch_sensor sensor_' + lane|string].filament_detected %}
    RESPOND MSG="Lane {lane} - Filament is at toolhead"
    SET_LANE LANE={lane}
  {% elif step == 349 %}
    RESPOND MSG="Lane {lane} - Filament is ready"
  {% endif %}

[gcode_macro _CHECKING_LANE]
gcode:
  {% set lane = params.LANE %}
  {% if not printer['filament_switch_sensor sensor_' + lane|string].filament_detected %}
    RESPOND MSG="Lane {lane}: No Filament is loaded"
  {% else %}
    REMOVE_FILAMENT LANE={lane}  SKIPCHECK=True
    RESPOND MSG="Lane {lane}: Filament is ready"
  {% endif %}

[gcode_macro SET_LANE]
gcode:
  {% set specified = params.SPECIFIED|default(None) %}
  {% if not specified == None %}
    RESPOND MSG="Activating Lane {specified}"
    SET_GCODE_VARIABLE MACRO=_FILAMENT_VARS VARIABLE=activelane VALUE={specified}
  {% elif printer['filament_switch_sensor sensor_0'].filament_detected and printer['filament_switch_sensor sensor_1'].filament_detected %}
    RESPOND TYPE=error msg="!! UNABLE TO DETECT SPOOL, BOTH SENSORS TRIGGERED !!"
  {% elif printer['filament_switch_sensor sensor_0'].filament_detected and not printer['filament_switch_sensor sensor_1'].filament_detected %}
    RESPOND MSG="Activating Lane 0"
    SET_GCODE_VARIABLE MACRO=_FILAMENT_VARS VARIABLE=activelane VALUE=0
  {% elif printer['filament_switch_sensor sensor_1'].filament_detected and not printer['filament_switch_sensor sensor_0'].filament_detected %}
    RESPOND MSG="Activating Lane 1"
    SET_GCODE_VARIABLE MACRO=_FILAMENT_VARS VARIABLE=activelane VALUE=1
  {% else %}
    RESPOND TYPE=error msg="!! UNKNOWN SPOOL CONFIGURATION !!"
  {% endif %}

[delayed_gcode INITIAL_SET_LANE]
initial_duration: 5
gcode:
  SET_FILAMENT_SENSOR SENSOR=taut ENABLE=0
  SET_FILAMENT_SENSOR SENSOR=slack ENABLE=0
  CHECK_STATUS
	
[gcode_macro REMOVE_FILAMENT] #Removes filament from system, automatic, based on current active spool
gcode:
  {% set lane = params.LANE|default(printer["gcode_macro _FILAMENT_VARS"].activelane) %}
  {% set skipcheck = params.SKIPCHECK|default(False) %}
  {% set CURRENT_ACCEL = printer.toolhead.max_accel %} 
  SET_VELOCITY_LIMIT ACCEL=50
  M83
  {% if printer["filament_switch_sensor slack"].filament_detected and printer['filament_switch_sensor sensor_' + lane|string].filament_detected and skipcheck == False %}
    RESPOND MSG="Retracting filament in Lane {lane} from toolhead..."
    _UNLOAD_TOOLHEAD LANE={lane}
  {% elif not printer["filament_switch_sensor slack"].filament_detected and printer['filament_switch_sensor sensor_' + lane|string].filament_detected and skipcheck == False %}
    RESPOND MSG="Unsure of filament location, carefully retracting filament in Lane {lane}..."
    _UNLOAD_TOOLHEAD LANE={lane}
  {% endif %}
  {% if printer['filament_switch_sensor sensor_' + lane|string].filament_detected %}
    RESPOND MSG="Carefully retracting filament in Lane {lane}..."
    {% set step = 0 %}
    {% for step in range(350) %}
      M400
      _REMOVING_FILAMENT LANE={lane}
      M400
    {% endfor %}
  {% endif %}

[gcode_macro _REMOVING_FILAMENT] 
gcode:
  {% set lane = params.LANE %}
  {% set stepper_accel = printer["gcode_macro _FILAMENT_VARS"].stepper_accel %}
  {% if printer['filament_switch_sensor sensor_' + lane|string].filament_detected %}
    ISOLATE_EXTRUDER LANE={lane}
    M400
    FORCE_MOVE STEPPER="extruder_stepper stepper_{lane}" DISTANCE=-6 VELOCITY=50 ACCEL={stepper_accel} 
    M400
  {% endif %}

[gcode_macro _UNLOAD_TOOLHEAD]
gcode:
  {% set lane = params.LANE %}
  {% set stepper_accel = printer["gcode_macro _FILAMENT_VARS"].stepper_accel %}
  {% set SLOW_MOVE = printer["gcode_macro _FILAMENT_VARS"].filament_feed_length %}
  {% set FAST_MOVE = printer["gcode_macro _FILAMENT_VARS"].bowden_length-SLOW_MOVE %}
  {% if printer.extruder.temperature < 210 %}
    M104 S210
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM=205
  {% endif %}
  SYNC_EXTRUDER LANE={lane}
  FORM_TIP
  M400
  G1 E-{SLOW_MOVE} F1000 # Slow move to clear the extruder
  ISOLATE_EXTRUDER LANE={lane}
  M400
  FORCE_MOVE STEPPER="extruder_stepper stepper_{lane}" DISTANCE=-{FAST_MOVE} VELOCITY=150 ACCEL={stepper_accel}
  M400

[gcode_macro LOAD_FILAMENT]
gcode:
  {% set temp = params.TEMP %}
  {% set lane = params.LANE %}
  M104 S{temp}
  {% set FAST_MOVE = printer["gcode_macro _FILAMENT_VARS"].bowden_length-10 %}	
  {% set SLOW_MOVE = printer["gcode_macro _FILAMENT_VARS"].filament_feed_length-40 %}
  {% set stepper_accel = printer["gcode_macro _FILAMENT_VARS"].stepper_accel %}
  {% if not printer['filament_switch_sensor sensor_' + lane|string].filament_detected %}
    REMOVE_FILAMENT
    RESPOND MSG="Fast loading the bowden..."
    ISOLATE_EXTRUDER LANE={lane}
    FORCE_MOVE STEPPER="extruder_stepper stepper_{lane}" DISTANCE={FAST_MOVE} VELOCITY=150 ACCEL={stepper_accel}
    M400
  {% endif %}
  RESPOND MSG="Pushing filament to the extruder..."
  M83
  {% set step = 0 %}
  {% for step in range(350) %}
    M400 # Wait for buffer to clear
    _LOADING_FILAMENT LANE={lane}
    M400
  {% endfor %}
  M104 S{temp}
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={temp|int - 5 }
  RESPOND MSG="Pushing filament to the nozzle..."
  SYNC_EXTRUDER LANE={lane}
  G1 E{SLOW_MOVE} F500
  #Check that extruder is pulling
  FORCE_MOVE STEPPER="extruder" DISTANCE=6 VELOCITY=10 ACCEL={stepper_accel}
  M400
  SET_GCODE_VARIABLE MACRO=_FILAMENT_VARS VARIABLE=pause_flag VALUE=True
  {% set step = 0 %}
  {% for step in range(6) %}
    M400
    _LOADING_FILAMENT_CHECK STEP={step}
    M400
  {% endfor %}
  
[gcode_macro _LOADING_FILAMENT]
gcode:
  {% set lane = params.LANE %}
  {% set stepper_accel = printer["gcode_macro _FILAMENT_VARS"].stepper_accel %}
  {% if not printer["filament_switch_sensor slack"].filament_detected %}
    FORCE_MOVE STEPPER="extruder_stepper stepper_{lane}" DISTANCE=6 VELOCITY=50 ACCEL={stepper_accel}
    M400
  {% endif %}

[gcode_macro _LOADING_FILAMENT_CHECK]
gcode:
  {% set step = params.STEP|int %}
  {% set stepper_accel = printer["gcode_macro _FILAMENT_VARS"].stepper_accel %}
  {% if step == 5 and printer["gcode_macro _FILAMENT_VARS"].pause_flag == True %}
    RESPOND TYPE=ERROR MSG="Tried to load filament 5 times, pausing print. Please load manually."
    PAUSE
  {% elif not printer["filament_switch_sensor slack"].filament_detected %}
    SET_GCODE_VARIABLE MACRO=_FILAMENT_VARS VARIABLE=pause_flag VALUE=False
  {% elif printer["filament_switch_sensor slack"].filament_detected %}
    RESPOND MSG="Pulling... "
    M400
    M400
    FORCE_MOVE STEPPER="extruder" DISTANCE=6 VELOCITY=10 ACCEL={stepper_accel}
    M400
  {% endif %}
  

[gcode_macro MEASURE_BOWDEN]
gcode:
  {% set lane = printer["gcode_macro _FILAMENT_VARS"].activelane %}
  {% if  printer["gcode_macro _FILAMENT_VARS"].activelane == None %}
    RESPOND MSG="No spool active. Activate a spool first"
  {% else %}
    RESPOND MSG="Removing Filament to starting location"
	REMOVE_FILAMENT
	RESPOND MSG="Starting Measurement"    
	SET_GCODE_VARIABLE MACRO=_FILAMENT_VARS VARIABLE=bowden_calculate VALUE=0
    M83
    {% set step = 0 %}
    {% for step in range(350) %}
      M400 # Wait for buffer to clear
      _MEASURING_BOWDEN
      M400
    {% endfor %}
    _MEASURING_BOWDEN_CHECK
  {% endif %}

[gcode_macro _MEASURING_BOWDEN]
gcode:
  {% set lane = printer["gcode_macro _FILAMENT_VARS"].activelane %}
  {% set stepper_accel = printer["gcode_macro _FILAMENT_VARS"].stepper_accel %}
  {% if not printer["filament_switch_sensor slack"].filament_detected %}
    M400
    FORCE_MOVE STEPPER="extruder_stepper stepper_{lane}" DISTANCE=10 VELOCITY=50 ACCEL={stepper_accel}
    M400
	{% set MEASUREMENT = printer["gcode_macro _FILAMENT_VARS"].bowden_calculate + 10 %}
	SET_GCODE_VARIABLE MACRO=_FILAMENT_VARS VARIABLE=bowden_calculate VALUE={MEASUREMENT}
  {% endif %}
  
[gcode_macro _MEASURING_BOWDEN_CHECK]
gcode:
  {% if not printer["filament_switch_sensor slack"].filament_detected %}
    RESPOND TYPE=error msg="!! FAULT WITH EXTRUDER FILAMENT LOADING !!"
  {% else %}
    RESPOND MSG="Bowden length is "{printer["gcode_macro _FILAMENT_VARS"].bowden_calculate}
  {% endif %}

[gcode_macro LS]
gcode:
  {% set lane = params.LANE %}
  {% set temp = params.TEMP %}
  {% set activel = printer["gcode_macro _FILAMENT_VARS"].activelane %}
  SET_FILAMENT_SENSOR SENSOR=taut ENABLE=0
  SET_FILAMENT_SENSOR SENSOR=slack ENABLE=0
  {% if lane|int != activel|int %}
    M104 S{temp}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={temp|int - 5 }
    REMOVE_FILAMENT
    SET_LANE specified={lane}
    LOAD_FILAMENT TEMP={temp} LANE={lane}
  {% elif not printer['filament_switch_sensor sensor_' + lane|string].filament_detected %}
    LOAD_FILAMENT TEMP={temp} LANE={lane}
  {% endif %}
  SET_LANE specified={lane}
  SYNC_EXTRUDER LANE={lane}
  M104 S{temp}
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={temp|int - 5 }
  SET_VELOCITY_LIMIT VELOCITY=200 ACCEL=1000
  SET_FILAMENT_SENSOR SENSOR=taut ENABLE=1
  SET_FILAMENT_SENSOR SENSOR=slack ENABLE=1
  #FORCE_MOVE STEPPER="extruder_stepper stepper_{lane}" DISTANCE=8 VELOCITY=50 ACCEL=600
  
[gcode_macro FORM_TIP]
gcode:
  SAVE_GCODE_STATE NAME=FORMTIPSTATE
  G91
  #G0 E1 F360 #G0 E1 F360 #G0 E1 F360 #G0 E15 F360
  #G0 E1 F3600 #G0 E1 F3600 #G0 E5 F3600
  G0 E-22 F3600 #added
  G0 E22.4 F3600 #added
  G0 E-22 F3600
  G0 E2 F300
  G0 E-2.1 F300
  G0 E2 F300
  G0 E-2.2 F300
  G0 E2 F300
  G0 E-2.3 F300
  G0 E2 F300
  G0 E-2.4 F300
  G0 E2 F300
  G0 E-2.5 F300
  G0 E2 F300
  G0 E-33 F300 #G0 E-43 F300
  G90
  RESTORE_GCODE_STATE NAME=FORMTIPSTATE

[gcode_macro NOZZLE_SCRUB]
description: Scrub the nozzle on a silicone scrubber
gcode:
  # Default values
  {% set scrub_x_start = params.scrub_x_start|default(120)|float %}
  {% set scrub_x_end = params.scrub_x_end|default(90)|float %}
  {% set scrub_y = params.scrub_y|default(5)|float %}
  {% set scrub_speed = params.scrub_speed|default(250)|float %}
  {% set scrub_passes = params.scrub_passes|default(2)|int %}

  # Move to the scrubber area
  G90                          ; Return to absolute positioning
  G1 X{scrub_x_start} Y{scrub_y} F{scrub_speed * 60} ; Move to scrub start position

  # Perform scrubbing passes
  {% for i in range(scrub_passes) %}
    G1 X{scrub_x_end} F{scrub_speed * 60} ; Move to scrub end
    G1 X{scrub_x_start} F{scrub_speed * 60} ; Move back to scrub start
  {% endfor %}
  G91
  G1 X-15 F{scrub_speed * 90}
  G90
